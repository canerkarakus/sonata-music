const { app, BrowserWindow, ipcMain, Menu, dialog, shell, protocol, globalShortcut } = require('electron');
const path = require('path');
const fs = require('fs');

// Backend server
let backendServer = null;

// Ana pencere referansƒ±
let mainWindow;

// Backend server ba≈ülatma
function startBackendServer() {
    try {
        console.log('üîÑ Backend server ba≈ülatƒ±lƒ±yor...');
        require('./server.js');
        console.log('‚úÖ Backend server ba≈ülatƒ±ldƒ±');
    } catch (error) {
        console.error('‚ùå Backend server ba≈ülatƒ±lamadƒ±:', error);
        dialog.showErrorBox('Server Hatasƒ±', 
            'Backend server ba≈ülatƒ±lamadƒ±. Uygulama giri≈ü/kayƒ±t sistemi √ßalƒ±≈ümayabilir.\n\nHata: ' + error.message
        );
    }
}

// Backend server durdurma
function stopBackendServer() {
    if (backendServer) {
        console.log('üîÑ Backend server durduruluyor...');
        backendServer.close(() => {
            console.log('‚úÖ Backend server durduruldu');
        });
        backendServer = null;
    }
}

// Uygulama hazƒ±r olduƒüunda √ßalƒ±≈üƒ±r
app.whenReady().then(() => {
    startBackendServer();
    createMainWindow();
    createMenu();
    setupIPC();
    
    // F12 tu≈ü kƒ±sayolu i√ßin global shortcut kaydet
    globalShortcut.register('F12', () => {
        if (mainWindow && mainWindow.webContents) {
            mainWindow.webContents.toggleDevTools();
        }
    });
    
    // macOS i√ßin: dock icon'a tƒ±klandƒ±ƒüƒ±nda pencere yoksa yeni pencere olu≈ütur
    app.on('activate', () => {
        if (BrowserWindow.getAllWindows().length === 0) {
            createMainWindow();
        }
    });
});

// T√ºm pencereler kapatƒ±ldƒ±ƒüƒ±nda uygulamayƒ± kapat (macOS hari√ß)
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

// Uygulama kapatƒ±lƒ±rken
app.on('before-quit', () => {
    stopBackendServer();
    // Global shortcuts'u temizle
    globalShortcut.unregisterAll();
});

// Ana pencere olu≈üturma fonksiyonu
function createMainWindow() {
    mainWindow = new BrowserWindow({
        width: 1600,
        height: 1000,
        minWidth: 1200,
        minHeight: 800,
        frame: false, // √ñzel window controls kullanacaƒüƒ±z
        titleBarStyle: 'hidden',
        webPreferences: {
            nodeIntegration: false,
            contextIsolation: true,
            enableRemoteModule: false,
            preload: path.join(__dirname, 'preload.js'),
            webSecurity: false, // F12 developer tools i√ßin
            devTools: false // Developer tools kapalƒ±
        },
        icon: path.join(__dirname, 'assets', 'icon.png'),
        show: false, // Ba≈ülangƒ±√ßta gizli, hazƒ±r olduƒüunda g√∂ster
        backgroundColor: '#0a0a0a', // Uygulama temasƒ± ile uyumlu
        webSecurity: false,
        allowRunningInsecureContent: false
    });

    // HTML dosyasƒ±nƒ± y√ºkle
    mainWindow.loadFile('index.html');

    // Pencere hazƒ±r olduƒüunda g√∂ster
    mainWindow.once('ready-to-show', () => {
        mainWindow.show();
        mainWindow.maximize(); // Uygulama tam ekran ba≈ülasƒ±n
        
        // DevTools'u sadece geli≈ütirme modunda a√ß
        if (process.argv.includes('--dev')) {
            mainWindow.webContents.openDevTools();
        }
    });

    // Pencere kapatƒ±lma eventi
    mainWindow.on('closed', () => {
        mainWindow = null;
    });

    // External linkler i√ßin varsayƒ±lan tarayƒ±cƒ±yƒ± kullan
    mainWindow.webContents.setWindowOpenHandler(({ url }) => {
        shell.openExternal(url);
        return { action: 'deny' };
    });

    // G√ºvenlik: navigation'ƒ± kontrol et
    mainWindow.webContents.on('will-navigate', (event, navigationUrl) => {
        const parsedUrl = new URL(navigationUrl);
        
        if (parsedUrl.origin !== 'file://') {
            event.preventDefault();
        }
    });
}

// Uygulama men√ºs√ºn√º olu≈ütur
function createMenu() {
    const template = [
        {
            label: 'Dosya',
            submenu: [
                {
                    label: 'Yeni √áalma Listesi',
                    accelerator: 'CmdOrCtrl+N',
                    click: () => {
                        mainWindow.webContents.send('menu-action', 'new-playlist');
                    }
                },
                {
                    label: '≈ûarkƒ± Y√ºkle',
                    accelerator: 'CmdOrCtrl+O',
                    click: () => {
                        mainWindow.webContents.send('menu-action', 'upload-song');
                    }
                },
                { type: 'separator' },
                {
                    label: '√áƒ±kƒ±≈ü',
                    accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',
                    click: () => {
                        app.quit();
                    }
                }
            ]
        },
        {
            label: 'D√ºzen',
            submenu: [
                { role: 'undo', label: 'Geri Al' },
                { role: 'redo', label: 'Yinele' },
                { type: 'separator' },
                { role: 'cut', label: 'Kes' },
                { role: 'copy', label: 'Kopyala' },
                { role: 'paste', label: 'Yapƒ±≈ütƒ±r' }
            ]
        },
        {
            label: 'G√∂r√ºn√ºm',
            submenu: [
                { role: 'reload', label: 'Yenile' },
                { role: 'forceReload', label: 'Zorla Yenile' },
                { role: 'toggleDevTools', label: 'Geli≈ütirici Ara√ßlarƒ±' },
                { type: 'separator' },
                { role: 'resetZoom', label: 'Zoom Sƒ±fƒ±rla' },
                { role: 'zoomIn', label: 'Yakƒ±nla≈ütƒ±r' },
                { role: 'zoomOut', label: 'Uzakla≈ütƒ±r' },
                { type: 'separator' },
                { role: 'togglefullscreen', label: 'Tam Ekran' }
            ]
        },
        {
            label: 'Oynatma',
            submenu: [
                {
                    label: 'Oynat/Duraklat',
                    accelerator: 'Space',
                    click: () => {
                        mainWindow.webContents.send('player-action', 'toggle-play');
                    }
                },
                {
                    label: '√ñnceki ≈ûarkƒ±',
                    accelerator: 'CmdOrCtrl+Left',
                    click: () => {
                        mainWindow.webContents.send('player-action', 'previous');
                    }
                },
                {
                    label: 'Sonraki ≈ûarkƒ±',
                    accelerator: 'CmdOrCtrl+Right',
                    click: () => {
                        mainWindow.webContents.send('player-action', 'next');
                    }
                },
                { type: 'separator' },
                {
                    label: 'Karƒ±≈ütƒ±r',
                    accelerator: 'CmdOrCtrl+S',
                    click: () => {
                        mainWindow.webContents.send('player-action', 'shuffle');
                    }
                },
                {
                    label: 'Tekrarla',
                    accelerator: 'CmdOrCtrl+R',
                    click: () => {
                        mainWindow.webContents.send('player-action', 'repeat');
                    }
                }
            ]
        },
        {
            label: 'Hesap',
            submenu: [
                {
                    label: 'Profil',
                    click: () => {
                        mainWindow.webContents.send('menu-action', 'profile');
                    }
                },
                {
                    label: 'Ayarlar',
                    accelerator: 'CmdOrCtrl+,',
                    click: () => {
                        mainWindow.webContents.send('menu-action', 'settings');
                    }
                },
                { type: 'separator' },
                {
                    label: 'Oturumu Kapat',
                    click: () => {
                        mainWindow.webContents.send('menu-action', 'logout');
                    }
                }
            ]
        },
        {
            label: 'Yardƒ±m',
            submenu: [
                {
                    label: 'Sonata Hakkƒ±nda',
                    click: () => {
                        dialog.showMessageBox(mainWindow, {
                            type: 'info',
                            title: 'Sonata Music Hakkƒ±nda',
                            message: 'Sonata Music v1.0.0',
                            detail: 'Modern masa√ºst√º m√ºzik uygulamasƒ±\n\n¬© 2024 Sonata Music Team\nT√ºm haklarƒ± saklƒ±dƒ±r.',
                            buttons: ['Tamam']
                        });
                    }
                },
                {
                    label: 'GitHub\'da G√∂r√ºnt√ºle',
                    click: () => {
                        shell.openExternal('https://github.com/sonata-music/sonata-desktop');
                    }
                }
            ]
        }
    ];

    // macOS i√ßin men√ºy√º ayarla
    if (process.platform === 'darwin') {
        template.unshift({
            label: app.getName(),
            submenu: [
                { role: 'about', label: 'Sonata Hakkƒ±nda' },
                { type: 'separator' },
                { role: 'services', label: 'Servisler' },
                { type: 'separator' },
                { role: 'hide', label: 'Sonata\'yƒ± Gizle' },
                { role: 'hideothers', label: 'Diƒüerlerini Gizle' },
                { role: 'unhide', label: 'T√ºm√ºn√º G√∂ster' },
                { type: 'separator' },
                { role: 'quit', label: 'Sonata\'dan √áƒ±k' }
            ]
        });
    }

    const menu = Menu.buildFromTemplate(template);
    Menu.setApplicationMenu(menu);
}

// IPC (Inter-Process Communication) kurulumu
function setupIPC() {
    // Pencere kontrol√º i√ßin IPC handlers
    ipcMain.handle('window-minimize', () => {
        if (mainWindow) {
            mainWindow.minimize();
        }
    });

    ipcMain.handle('window-maximize', () => {
        if (mainWindow) {
            if (mainWindow.isMaximized()) {
                mainWindow.unmaximize();
            } else {
                mainWindow.maximize();
            }
        }
    });

    ipcMain.handle('window-close', () => {
        if (mainWindow) {
            mainWindow.close();
        }
    });

    ipcMain.handle('window-is-maximized', () => {
        return mainWindow ? mainWindow.isMaximized() : false;
    });

    // Dosya se√ßimi i√ßin dialog
    ipcMain.handle('show-open-dialog', async (event, options) => {
        const result = await dialog.showOpenDialog(mainWindow, options);
        return result;
    });

    ipcMain.handle('show-save-dialog', async (event, options) => {
        const result = await dialog.showSaveDialog(mainWindow, options);
        return result;
    });

    // Dosya i≈ülemleri
    ipcMain.handle('read-file', async (event, filePath) => {
        try {
            const data = fs.readFileSync(filePath);
            return { success: true, data: data.toString('base64') };
        } catch (error) {
            return { success: false, error: error.message };
        }
    });

    ipcMain.handle('write-file', async (event, filePath, data) => {
        try {
            fs.writeFileSync(filePath, data);
            return { success: true };
        } catch (error) {
            return { success: false, error: error.message };
        }
    });

    // Uygulama bilgileri
    ipcMain.handle('get-app-version', () => {
        return app.getVersion();
    });

    ipcMain.handle('get-app-path', () => {
        return app.getAppPath();
    });



    // External links
    ipcMain.handle('open-external', (event, url) => {
        shell.openExternal(url);
    });
}

// Uygulama g√ºvenlik ayarlarƒ±
app.on('web-contents-created', (event, contents) => {
    // External navigation'ƒ± engelle
    contents.on('will-navigate', (event, navigationUrl) => {
        const parsedUrl = new URL(navigationUrl);
        
        if (parsedUrl.origin !== 'file://') {
            event.preventDefault();
        }
    });

    // Yeni pencere a√ßƒ±lmasƒ±nƒ± engelle
    contents.setWindowOpenHandler(({ url }) => {
        shell.openExternal(url);
        return { action: 'deny' };
    });
});

// Sertifika hatalarƒ±nƒ± yoksay (geli≈ütirme i√ßin)
app.commandLine.appendSwitch('ignore-certificate-errors');

// Hardware acceleration (isteƒüe baƒülƒ± olarak devre dƒ±≈üƒ± bƒ±rakƒ±labilir)
// app.disableHardwareAcceleration();

// Single instance uygulamasƒ± (sadece bir instance √ßalƒ±≈üabilir)
const gotTheLock = app.requestSingleInstanceLock();

if (!gotTheLock) {
    app.quit();
} else {
    app.on('second-instance', (event, commandLine, workingDirectory) => {
        // Ikinci instance a√ßƒ±lmaya √ßalƒ±≈üƒ±ldƒ±ƒüƒ±nda mevcut pencereyi √∂ne getir
        if (mainWindow) {
            if (mainWindow.isMinimized()) mainWindow.restore();
            mainWindow.focus();
        }
    });
} 